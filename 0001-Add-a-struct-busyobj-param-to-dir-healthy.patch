From 5e3ab02eea5984c3871b85c54f210cec6935dfe4 Mon Sep 17 00:00:00 2001
From: Dag Haavi Finstad <daghf@varnish-software.com>
Date: Thu, 2 Oct 2014 16:39:16 +0200
Subject: [PATCH 1/3] Add a struct busyobj param to dir->healthy()

---
 bin/varnishd/cache/cache_backend.c  | 4 +++-
 bin/varnishd/cache/cache_director.c | 4 ++--
 bin/varnishd/cache/cache_director.h | 5 +++--
 lib/libvmod_directors/fall_back.c   | 7 ++++---
 lib/libvmod_directors/hash.c        | 2 +-
 lib/libvmod_directors/random.c      | 7 ++++---
 lib/libvmod_directors/round_robin.c | 7 ++++---
 lib/libvmod_directors/vdir.c        | 8 ++++----
 lib/libvmod_directors/vdir.h        | 5 +++--
 lib/libvmod_std/vmod_std.c          | 8 +++++++-
 10 files changed, 35 insertions(+), 22 deletions(-)

diff --git a/bin/varnishd/cache/cache_backend.c b/bin/varnishd/cache/cache_backend.c
index 51e9cb7..fb800b2 100644
--- a/bin/varnishd/cache/cache_backend.c
+++ b/bin/varnishd/cache/cache_backend.c
@@ -438,11 +438,13 @@ vbe_dir_getfd(const struct director *d, struct busyobj *bo)
 }
 
 static unsigned __match_proto__(vdi_healthy_f)
-vbe_dir_healthy(const struct director *d, double *changed)
+vbe_dir_healthy(const struct director *d, struct busyobj *bo, double *changed)
 {
 	struct vbe_dir *vs;
 	struct backend *be;
 
+	(void) bo;
+
 	CHECK_OBJ_NOTNULL(d, DIRECTOR_MAGIC);
 	CAST_OBJ_NOTNULL(vs, d->priv, VDI_SIMPLE_MAGIC);
 	be = vs->backend;
diff --git a/bin/varnishd/cache/cache_director.c b/bin/varnishd/cache/cache_director.c
index 7a961ad..fb617bb 100644
--- a/bin/varnishd/cache/cache_director.c
+++ b/bin/varnishd/cache/cache_director.c
@@ -145,12 +145,12 @@ VDI_GetFd(const struct director *d, struct worker *wrk, struct busyobj *bo)
  */
 
 int
-VDI_Healthy(const struct director *d)
+VDI_Healthy(const struct director *d, struct busyobj *bo)
 {
 
 	CHECK_OBJ_NOTNULL(d, DIRECTOR_MAGIC);
 	AN(d->healthy);
-	return (d->healthy(d, NULL));
+	return (d->healthy(d, bo, NULL));
 }
 
 /* Get suckaddr ------------------------------------------------------*/
diff --git a/bin/varnishd/cache/cache_director.h b/bin/varnishd/cache/cache_director.h
index f717aa4..0b5ee0c 100644
--- a/bin/varnishd/cache/cache_director.h
+++ b/bin/varnishd/cache/cache_director.h
@@ -43,7 +43,8 @@
  */
 
 typedef struct vbc *vdi_getfd_f(const struct director *, struct busyobj *);
-typedef unsigned vdi_healthy_f(const struct director *, double *changed);
+typedef unsigned vdi_healthy_f(const struct director *, struct busyobj *,
+    double *changed);
 typedef const struct director *vdi_resolve_f(const struct director *,
     struct worker *, struct busyobj *);
 typedef int vdi_gethdrs_f(const struct director *, struct worker *,
@@ -78,7 +79,7 @@ void VDI_Finish(const struct director *d, struct worker *wrk,
     struct busyobj *bo);
 struct vbc *VDI_GetFd(const struct director *d, struct worker *wrk,
     struct busyobj *);
-int VDI_Healthy(const struct director *);
+int VDI_Healthy(const struct director *, struct busyobj *bo);
 struct suckaddr *VDI_Suckaddr(const struct director *d, struct worker *wrk,
     struct busyobj *bo);
 void VDI_AddHostHeader(struct http *to, const struct vbc *vbc);
diff --git a/lib/libvmod_directors/fall_back.c b/lib/libvmod_directors/fall_back.c
index a3d2a9c..5f7492f 100644
--- a/lib/libvmod_directors/fall_back.c
+++ b/lib/libvmod_directors/fall_back.c
@@ -45,12 +45,13 @@ struct vmod_directors_fallback {
 };
 
 static unsigned __match_proto__(vdi_healthy)
-vmod_fallback_healthy(const struct director *dir, double *changed)
+vmod_fallback_healthy(const struct director *dir, struct busyobj *bo,
+    double *changed)
 {
 	struct vmod_directors_fallback *rr;
 
 	CAST_OBJ_NOTNULL(rr, dir->priv, VMOD_DIRECTORS_FALLBACK_MAGIC);
-	return (vdir_any_healthy(rr->vd, changed));
+	return (vdir_any_healthy(rr->vd, bo, changed));
 }
 
 static const struct director * __match_proto__(vdi_resolve_f)
@@ -69,7 +70,7 @@ vmod_fallback_resolve(const struct director *dir, struct worker *wrk,
 	for (u = 0; u < rr->vd->n_backend; u++) {
 		be = rr->vd->backend[u];
 		CHECK_OBJ_NOTNULL(be, DIRECTOR_MAGIC);
-		if (be->healthy(be, NULL))
+		if (be->healthy(be, bo, NULL))
 			break;
 	}
 	vdir_unlock(rr->vd);
diff --git a/lib/libvmod_directors/hash.c b/lib/libvmod_directors/hash.c
index e7b63a0..2277d32 100644
--- a/lib/libvmod_directors/hash.c
+++ b/lib/libvmod_directors/hash.c
@@ -120,6 +120,6 @@ vmod_hash_backend(VRT_CTX, struct vmod_directors_hash *rr,
 	r = vbe32dec(sha256);
 	r = scalbn(r, -32);
 	assert(r >= 0 && r <= 1.0);
-	be = vdir_pick_be(rr->vd, r, rr->n_backend);
+	be = vdir_pick_be(rr->vd, ctx->bo, r, rr->n_backend);
 	return (be);
 }
diff --git a/lib/libvmod_directors/random.c b/lib/libvmod_directors/random.c
index a693bc6..4effaa6 100644
--- a/lib/libvmod_directors/random.c
+++ b/lib/libvmod_directors/random.c
@@ -50,12 +50,13 @@ struct vmod_directors_random {
 };
 
 static unsigned __match_proto__(vdi_healthy)
-vmod_random_healthy(const struct director *dir, double *changed)
+vmod_random_healthy(const struct director *dir, struct busyobj *bo,
+    double *changed)
 {
 	struct vmod_directors_random *rr;
 
 	CAST_OBJ_NOTNULL(rr, dir->priv, VMOD_DIRECTORS_RANDOM_MAGIC);
-	return (vdir_any_healthy(rr->vd, changed));
+	return (vdir_any_healthy(rr->vd, bo, changed));
 }
 
 static const struct director * __match_proto__(vdi_resolve_f)
@@ -72,7 +73,7 @@ vmod_random_resolve(const struct director *dir, struct worker *wrk,
 	CAST_OBJ_NOTNULL(rr, dir->priv, VMOD_DIRECTORS_RANDOM_MAGIC);
 	r = scalbn(random(), -31);
 	assert(r >= 0 && r < 1.0);
-	be = vdir_pick_be(rr->vd, r, rr->n_backend);
+	be = vdir_pick_be(rr->vd, bo, r, rr->n_backend);
 	return (be);
 }
 
diff --git a/lib/libvmod_directors/round_robin.c b/lib/libvmod_directors/round_robin.c
index 39f6b3d..0ec369d 100644
--- a/lib/libvmod_directors/round_robin.c
+++ b/lib/libvmod_directors/round_robin.c
@@ -46,12 +46,13 @@ struct vmod_directors_round_robin {
 };
 
 static unsigned __match_proto__(vdi_healthy)
-vmod_rr_healthy(const struct director *dir, double *changed)
+vmod_rr_healthy(const struct director *dir, struct busyobj *bo,
+    double *changed)
 {
 	struct vmod_directors_round_robin *rr;
 
 	CAST_OBJ_NOTNULL(rr, dir->priv, VMOD_DIRECTORS_ROUND_ROBIN_MAGIC);
-	return (vdir_any_healthy(rr->vd, changed));
+	return (vdir_any_healthy(rr->vd, bo, changed));
 }
 
 static const struct director * __match_proto__(vdi_resolve_f)
@@ -72,7 +73,7 @@ vmod_rr_resolve(const struct director *dir, struct worker *wrk,
 		be = rr->vd->backend[rr->nxt];
 		rr->nxt++;
 		CHECK_OBJ_NOTNULL(be, DIRECTOR_MAGIC);
-		if (be->healthy(be, NULL))
+		if (be->healthy(be, bo, NULL))
 			break;
 	}
 	vdir_unlock(rr->vd);
diff --git a/lib/libvmod_directors/vdir.c b/lib/libvmod_directors/vdir.c
index 3488026..782ae7f 100644
--- a/lib/libvmod_directors/vdir.c
+++ b/lib/libvmod_directors/vdir.c
@@ -129,7 +129,7 @@ vdir_add_backend(struct vdir *vd, VCL_BACKEND be, double weight)
 }
 
 unsigned
-vdir_any_healthy(struct vdir *vd, double *changed)
+vdir_any_healthy(struct vdir *vd, struct busyobj *bo, double *changed)
 {
 	unsigned retval = 0;
 	VCL_BACKEND be;
@@ -143,7 +143,7 @@ vdir_any_healthy(struct vdir *vd, double *changed)
 	for (u = 0; u < vd->n_backend; u++) {
 		be = vd->backend[u];
 		CHECK_OBJ_NOTNULL(be, DIRECTOR_MAGIC);
-		retval = be->healthy(be, &c);
+		retval = be->healthy(be, bo, &c);
 		if (changed != NULL && c > *changed)
 			*changed = c;
 		if (retval)
@@ -174,7 +174,7 @@ vdir_pick_by_weight(const struct vdir *vd, double w,
 }
 
 VCL_BACKEND
-vdir_pick_be(struct vdir *vd, double w, unsigned nloops)
+vdir_pick_be(struct vdir *vd, struct busyobj *bo, double w, unsigned nloops)
 {
 	struct vbitmap *vbm = NULL;
 	unsigned u, v, l;
@@ -190,7 +190,7 @@ vdir_pick_be(struct vdir *vd, double w, unsigned nloops)
 		u = vdir_pick_by_weight(vd, w * tw, vbm);
 		be = vd->backend[u];
 		CHECK_OBJ_NOTNULL(be, DIRECTOR_MAGIC);
-		if (be->healthy(be, NULL))
+		if (be->healthy(be, bo, NULL))
 			break;
 		if (l == 0) {
 			vbm = vd->vbm;
diff --git a/lib/libvmod_directors/vdir.h b/lib/libvmod_directors/vdir.h
index 5afb754..271fd1f 100644
--- a/lib/libvmod_directors/vdir.h
+++ b/lib/libvmod_directors/vdir.h
@@ -47,5 +47,6 @@ void vdir_delete(struct vdir **vdp);
 void vdir_lock(struct vdir *vd);
 void vdir_unlock(struct vdir *vd);
 unsigned vdir_add_backend(struct vdir *vd, VCL_BACKEND be, double weight);
-unsigned vdir_any_healthy(struct vdir *vd, double *changed);
-VCL_BACKEND vdir_pick_be(struct vdir *vd, double w, unsigned nloops);
+unsigned vdir_any_healthy(struct vdir *vd, struct busyobj *bo, double *changed);
+VCL_BACKEND vdir_pick_be(struct vdir *vd, struct busyobj *bo,
+    double w, unsigned nloops);
diff --git a/lib/libvmod_std/vmod_std.c b/lib/libvmod_std/vmod_std.c
index 4bba4b7..696091c 100644
--- a/lib/libvmod_std/vmod_std.c
+++ b/lib/libvmod_std/vmod_std.c
@@ -193,7 +193,13 @@ vmod_healthy(VRT_CTX, VCL_BACKEND be)
 	if (be == NULL)
 		return (0);
 	CHECK_OBJ_NOTNULL(be, DIRECTOR_MAGIC);
-	return (VDI_Healthy(be));
+	if (ctx->bo) {
+		CHECK_OBJ_NOTNULL(ctx->bo, BUSYOBJ_MAGIC);
+		return (VDI_Healthy(be, ctx->bo));
+	} else {
+		return (VDI_Healthy(be, NULL));
+	}
+
 }
 
 VCL_INT __match_proto__(td_std_port)
-- 
2.1.0

